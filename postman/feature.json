{
  "info": {
    "_postman_id": "68891296-1fd5-4d62-9033-872c40a04dc2",
    "name": "Comments test",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "36411619"
  },
  "item": [
    {
      "name": "Successfully adding a new comment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "let commentId = pm.collectionVariables.get(\"commentId\");\r",
              "\r",
              "if (commentId !== undefined) {\r",
              "    commentId = parseInt(commentId);\r",
              "    commentId++;\r",
              "} else {\r",
              "    commentId = 1; \r",
              "}\r",
              "\r",
              "pm.collectionVariables.set(\"commentId\", commentId);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 201\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "pm.test(\"The response body is present and in JSON format\", function () {\r",
              "    pm.expect(pm.response.text()).not.to.be.empty; \r",
              "    pm.response.to.have.jsonBody();              \r",
              "});\r",
              "\r",
              "pm.test(\"The response contains required fields\", function () {\r",
              "    var jsonResponse = pm.response.json();\r",
              "    \r",
              "    pm.expect(jsonResponse).to.have.property(\"id\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"text\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"author\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"event\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"created\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Отличное событие\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Creating a comment with length = 0",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 400\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{baseUrl}}/users/11/events/7/comments"
      },
      "response": []
    },
    {
      "name": "Creating a comment with length > 5000",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.environment.set(\"longString\", 'a'.repeat(5001));"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 400\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"{{longString}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{baseUrl}}/users/11/events/7/comments"
      },
      "response": []
    },
    {
      "name": "Attempt to send a request with incorrect parameters in the request",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 400\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Кекс\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/7/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            "7",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "sdfddsf"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Attempt to add a comment to a non-existing event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"The response body is present and in JSON format\", function () {\r",
              "    pm.expect(pm.response.text()).not.to.be.empty; \r",
              "    pm.response.to.have.jsonBody();              \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Кекс\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{baseUrl}}/users/11/events/70000/comments"
      },
      "response": []
    },
    {
      "name": "Getting a comment by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"The response body is present and in JSON format\", function () {\r",
              "    pm.expect(pm.response.text()).not.to.be.empty; \r",
              "    pm.response.to.have.jsonBody();              \r",
              "});\r",
              "\r",
              "pm.test(\"The response contains required fields\", function () {\r",
              "    var jsonResponse = pm.response.json();\r",
              "    \r",
              "    pm.expect(jsonResponse).to.have.property(\"id\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"text\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"author\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"event\");\r",
              "    pm.expect(jsonResponse).to.have.property(\"created\");\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": "{{baseUrl}}/events/comments/{{commentId}}"
      },
      "response": []
    },
    {
      "name": "Attempt to get a non-existing comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"The response body is present and in JSON format\", function () {\r",
              "    pm.expect(pm.response.text()).not.to.be.empty; \r",
              "    pm.response.to.have.jsonBody();              \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": "{{baseUrl}}/events/comments/80000000"
      },
      "response": []
    },
    {
      "name": "Deleting a comment by an admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});\r",
              "let currentUserId = parseInt(pm.collectionVariables.get(\"commentId\") || \"1\", 10);\r",
              "\r",
              "pm.collectionVariables.set(\"commentId\", currentUserId + 1);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Deleting a non-existing comment by the admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code 404\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"The response body is present and in JSON format\", function () {\r",
              "    pm.expect(pm.response.text()).not.to.be.empty; \r",
              "    pm.response.to.have.jsonBody();              \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": "{{baseUrl}}/admin/events/comments/800000000"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "let userId = pm.collectionVariables.get(\"userId\");\r",
          "\r",
          "if (userId !== undefined) {\r",
          "    userId = parseInt(userId);\r",
          "    userId++;\r",
          "} else {\r",
          "    userId = 1;\r",
          "}\r",
          "\r",
          "pm.collectionVariables.set(\"userId\", userId);\r",
          "\r",
          "let eventId = pm.collectionVariables.get(\"eventId\");\r",
          "\r",
          "if (eventId !== undefined) {\r",
          "    eventId = parseInt(eventId);\r",
          "    eventId++;\r",
          "} else {\r",
          "    eventId = 1;\r",
          "}\r",
          "\r",
          "pm.collectionVariables.set(\"eventId\", eventId);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "userId",
      "value": "0",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "0",
      "type": "string"
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "0",
      "type": "string"
    }
  ]
}